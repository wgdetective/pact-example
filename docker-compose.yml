version: "3.8"

services:
  postgresql:
    image: postgres:latest
    restart: always
    env_file: ./.env
    healthcheck:
      test: psql postgres --command "select 1" -U postgres
    volumes:
      - postgres-volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: $POSTGRESDB_USER
      POSTGRES_PASSWORD: $POSTGRESDB_PASSWORD
    ports:
      - "$POSTGRESDB_PORT:5432"
  adminer:
    image: adminer
    restart: always
    ports:
      - "$ADMINER_PORT:8080"
#  mysqldb:
#    image: mysql:latest
#    restart: unless-stopped
#    env_file: ./.env
#    environment:
#      - MYSQL_ROOT_PASSWORD=$MYSQLDB_ROOT_PASSWORD
#      - MYSQL_DATABASE=$MYSQLDB_DATABASE
#    ports:
#      - $MYSQLDB_LOCAL_PORT:$MYSQLDB_DOCKER_PORT
#    volumes:
#      - db:/var/lib/mysql
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  music-service-ms:
    depends_on:
      - postgresql
      - kafka
    build: ./music-service-ms
    restart: on-failure
    env_file: ./.env
    ports:
      - $MS_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.r2dbc.url"  : "r2dbc:pool:postgresql://postgresql:$POSTGRESDB_PORT/$POSTGRESDB_NAME?useSSL=false&useUnicode=yes&characterEncoding=UTF-8",
        "spring.r2dbc.username" : "$POSTGRESDB_USER",
        "spring.r2dbc.password" : "$POSTGRESDB_PASSWORD",
        "spring.kafka.bootstrap-servers" : "kafka:$KAFKA_PORT"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
  music-grant-service-ms:
    depends_on:
      - kafka
    build: ./music-grant-service-ms
    restart: on-failure
    env_file: ./.env
    ports:
      - $MGS_LOCAL_PORT:$SPRING_DOCKER_PORT
    environment:
      SPRING_APPLICATION_JSON: '{
        "spring.kafka.bootstrap-servers" : "kafka:$KAFKA_PORT"
      }'
    volumes:
      - .m2:/root/.m2
    stdin_open: true
    tty: true
  pact-broker:
    image: pactfoundation/pact-broker:latest
    ports:
      - "$PACTBROKER_PORT:9292"
    depends_on:
      - postgresql
    environment:
      PACT_BROKER_PORT: $PACTBROKER_PORT
      PACT_BROKER_DATABASE_URL: "postgres://$POSTGRESDB_USER:$POSTGRESDB_PASSWORD@postgresql/$POSTGRESDB_NAME"
      PACT_BROKER_LOG_LEVEL: INFO
      PACT_BROKER_SQL_LOG_LEVEL: DEBUG
      # PACT_BROKER_DATABASE_CONNECT_MAX_RETRIES is only needed for docker-compose
      # because the database takes longer to start up than the puma process
      # Should not be needed in production.
      PACT_BROKER_DATABASE_CONNECT_MAX_RETRIES: "5"
      # The list of allowed base URLs (not setting this makes the app vulnerable to cache poisoning)
      # This list allows the app to be addressed from the host and from within another docker container correctly
      # Ngnix config below makes the app accessible on ports 443 and 80, while the Ruby application itself runs on port 9292
      PACT_BROKER_BASE_URL: 'https://localhost http://localhost http://localhost:9292 http://pact-broker:9292 https://host.docker.internal http://host.docker.internal http://host.docker.internal:9292'

volumes:
  postgres-volume:
